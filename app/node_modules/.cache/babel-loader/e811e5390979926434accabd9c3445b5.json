{"ast":null,"code":"import _regeneratorRuntime from \"/Users/user/Documents/GitHub/Buildspace/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/user/Documents/GitHub/Buildspace/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/user/Documents/GitHub/Buildspace/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/user/Documents/GitHub/Buildspace/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { IdlCoder } from \"./idl\";\nimport { sha256 } from \"js-sha256\";\nimport camelcase from \"camelcase\";\n/**\n * Number of bytes of the account discriminator.\n */\n\nexport var ACCOUNT_DISCRIMINATOR_SIZE = 8;\n/**\n * Encodes and decodes account objects.\n */\n\nexport var AccountsCoder = /*#__PURE__*/function () {\n  function AccountsCoder(idl) {\n    _classCallCheck(this, AccountsCoder);\n\n    if (idl.accounts === undefined) {\n      this.accountLayouts = new Map();\n      return;\n    }\n\n    var layouts = idl.accounts.map(function (acc) {\n      return [acc.name, IdlCoder.typeDefLayout(acc, idl.types)];\n    });\n    this.accountLayouts = new Map(layouts);\n  }\n\n  _createClass(AccountsCoder, [{\n    key: \"encode\",\n    value: function () {\n      var _encode = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(accountName, account) {\n        var buffer, layout, len, accountData, discriminator;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                buffer = Buffer.alloc(1000); // TODO: use a tighter buffer.\n\n                layout = this.accountLayouts.get(accountName);\n\n                if (layout) {\n                  _context.next = 4;\n                  break;\n                }\n\n                throw new Error(\"Unknown account: \".concat(accountName));\n\n              case 4:\n                len = layout.encode(account, buffer);\n                accountData = buffer.slice(0, len);\n                discriminator = AccountsCoder.accountDiscriminator(accountName);\n                return _context.abrupt(\"return\", Buffer.concat([discriminator, accountData]));\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function encode(_x, _x2) {\n        return _encode.apply(this, arguments);\n      }\n\n      return encode;\n    }()\n  }, {\n    key: \"decode\",\n    value: function decode(accountName, ix) {\n      // Chop off the discriminator before decoding.\n      var data = ix.slice(ACCOUNT_DISCRIMINATOR_SIZE);\n      var layout = this.accountLayouts.get(accountName);\n\n      if (!layout) {\n        throw new Error(\"Unknown account: \".concat(accountName));\n      }\n\n      return layout.decode(data);\n    }\n    /**\n     * Calculates and returns a unique 8 byte discriminator prepended to all anchor accounts.\n     *\n     * @param name The name of the account to calculate the discriminator.\n     */\n\n  }], [{\n    key: \"accountDiscriminator\",\n    value: function accountDiscriminator(name) {\n      return Buffer.from(sha256.digest(\"account:\".concat(camelcase(name, {\n        pascalCase: true\n      })))).slice(0, ACCOUNT_DISCRIMINATOR_SIZE);\n    }\n  }]);\n\n  return AccountsCoder;\n}();","map":null,"metadata":{},"sourceType":"module"}