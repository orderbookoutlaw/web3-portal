{"ast":null,"code":"import _toConsumableArray from \"/Users/user/Desktop/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/user/Desktop/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/user/Desktop/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/user/Desktop/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { TransactionInstruction } from \"@solana/web3.js\";\nimport { IdlError } from \"../../error\";\nimport { toInstruction, validateAccounts, translateAddress } from \"../common\";\nimport { splitArgsAndCtx } from \"../context\";\n\nvar InstructionNamespaceFactory = /*#__PURE__*/function () {\n  function InstructionNamespaceFactory() {\n    _classCallCheck(this, InstructionNamespaceFactory);\n  }\n\n  _createClass(InstructionNamespaceFactory, null, [{\n    key: \"build\",\n    value: function build(idlIx, encodeFn, programId) {\n      if (idlIx.name === \"_inner\") {\n        throw new IdlError(\"the _inner name is reserved\");\n      }\n\n      var ix = function ix() {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        var _splitArgsAndCtx = splitArgsAndCtx(idlIx, [].concat(args)),\n            _splitArgsAndCtx2 = _slicedToArray(_splitArgsAndCtx, 2),\n            ixArgs = _splitArgsAndCtx2[0],\n            ctx = _splitArgsAndCtx2[1];\n\n        validateAccounts(idlIx.accounts, ctx.accounts);\n        validateInstruction.apply(void 0, [idlIx].concat(args));\n        var keys = ix.accounts(ctx.accounts);\n\n        if (ctx.remainingAccounts !== undefined) {\n          keys.push.apply(keys, _toConsumableArray(ctx.remainingAccounts));\n        }\n\n        if (ctx.__private && ctx.__private.logAccounts) {\n          console.log(\"Outgoing account metas:\", keys);\n        }\n\n        return new TransactionInstruction({\n          keys: keys,\n          programId: programId,\n          data: encodeFn(idlIx.name, toInstruction.apply(void 0, [idlIx].concat(_toConsumableArray(ixArgs))))\n        });\n      }; // Utility fn for ordering the accounts for this instruction.\n\n\n      ix[\"accounts\"] = function (accs) {\n        return InstructionNamespaceFactory.accountsArray(accs, idlIx.accounts);\n      };\n\n      return ix;\n    }\n  }, {\n    key: \"accountsArray\",\n    value: function accountsArray(ctx, accounts) {\n      if (!ctx) {\n        return [];\n      }\n\n      return accounts.map(function (acc) {\n        // Nested accounts.\n        var nestedAccounts = \"accounts\" in acc ? acc.accounts : undefined;\n\n        if (nestedAccounts !== undefined) {\n          var rpcAccs = ctx[acc.name];\n          return InstructionNamespaceFactory.accountsArray(rpcAccs, acc.accounts).flat();\n        } else {\n          var account = acc;\n          return {\n            pubkey: translateAddress(ctx[acc.name]),\n            isWritable: account.isMut,\n            isSigner: account.isSigner\n          };\n        }\n      }).flat();\n    }\n  }]);\n\n  return InstructionNamespaceFactory;\n}(); // Throws error if any argument required for the `ix` is not given.\n\n\nexport { InstructionNamespaceFactory as default };\n\nfunction validateInstruction(ix) {// todo\n}","map":null,"metadata":{},"sourceType":"module"}