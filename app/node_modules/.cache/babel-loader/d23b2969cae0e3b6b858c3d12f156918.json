{"ast":null,"code":"import camelCase from \"camelcase\";\nimport * as toml from \"toml\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { Program } from \"./program\";\nimport { isBrowser } from \"./utils/common\";\nvar _populatedWorkspace = false;\n/**\n * The `workspace` namespace provides a convenience API to automatically\n * search for and deserialize [[Program]] objects defined by compiled IDLs\n * in an Anchor workspace.\n *\n * This API is for Node only.\n */\n\nvar workspace = new Proxy({}, {\n  get: function get(workspaceCache, programName) {\n    if (isBrowser) {\n      console.log(\"Workspaces aren't available in the browser\");\n      return undefined;\n    }\n\n    var fs = require(\"fs\");\n\n    var process = require(\"process\");\n\n    if (!_populatedWorkspace) {\n      var path = require(\"path\");\n\n      var projectRoot = process.cwd();\n\n      while (!fs.existsSync(path.join(projectRoot, \"Anchor.toml\"))) {\n        var parentDir = path.dirname(projectRoot);\n\n        if (parentDir === projectRoot) {\n          projectRoot = undefined;\n        }\n\n        projectRoot = parentDir;\n      }\n\n      if (projectRoot === undefined) {\n        throw new Error(\"Could not find workspace root.\");\n      }\n\n      var idlFolder = \"\".concat(projectRoot, \"/target/idl\");\n\n      if (!fs.existsSync(idlFolder)) {\n        throw new Error(\"\".concat(idlFolder, \" doesn't exist. Did you use \\\"anchor build\\\"?\"));\n      }\n\n      var idlMap = new Map();\n      fs.readdirSync(idlFolder).forEach(function (file) {\n        var filePath = \"\".concat(idlFolder, \"/\").concat(file);\n        var idlStr = fs.readFileSync(filePath);\n        var idl = JSON.parse(idlStr);\n        idlMap.set(idl.name, idl);\n        var name = camelCase(idl.name, {\n          pascalCase: true\n        });\n\n        if (idl.metadata && idl.metadata.address) {\n          workspaceCache[name] = new Program(idl, new PublicKey(idl.metadata.address));\n        }\n      }); // Override the workspace programs if the user put them in the config.\n\n      var anchorToml = toml.parse(fs.readFileSync(path.join(projectRoot, \"Anchor.toml\"), \"utf-8\"));\n      var clusterId = anchorToml.provider.cluster;\n\n      if (anchorToml.programs && anchorToml.programs[clusterId]) {\n        attachWorkspaceOverride(workspaceCache, anchorToml.programs[clusterId], idlMap);\n      }\n\n      _populatedWorkspace = true;\n    }\n\n    return workspaceCache[programName];\n  }\n});\n\nfunction attachWorkspaceOverride(workspaceCache, overrideConfig, idlMap) {\n  Object.keys(overrideConfig).forEach(function (programName) {\n    var wsProgramName = camelCase(programName, {\n      pascalCase: true\n    });\n    var entry = overrideConfig[programName];\n    var overrideAddress = new PublicKey(typeof entry === \"string\" ? entry : entry.address);\n    var idl = idlMap.get(programName);\n\n    if (typeof entry !== \"string\" && entry.idl) {\n      idl = JSON.parse(require(\"fs\").readFileSync(entry.idl, \"utf-8\"));\n    }\n\n    if (!idl) {\n      throw new Error(\"Error loading workspace IDL for \".concat(programName));\n    }\n\n    workspaceCache[wsProgramName] = new Program(idl, overrideAddress);\n  });\n}\n\nexport default workspace;","map":null,"metadata":{},"sourceType":"module"}