{"ast":null,"code":"import _regeneratorRuntime from \"/Users/user/Desktop/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/user/Desktop/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/user/Desktop/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/user/Desktop/app/src/App.js\";\n\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\nimport React, { useEffect, useState } from 'react';\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport kp from './keypair.json';\nimport './App.css';\nimport idl from './idl.json'; // SystemProgram is a reference to the Solana runtime!\n\nvar SystemProgram = web3.SystemProgram,\n    Keypair = web3.Keypair; // Create a keypair for the account that will hold the GIF data.\n\nvar arr = Object.values(kp._keypair.secretKey);\nvar secret = new Uint8Array(arr);\nvar baseAccount = web3.Keypair.fromSecretKey(secret); // Get our program's id from the IDL file.\n\nvar programID = new PublicKey(idl.metadata.address); // Set our network to devnet.\n\nvar network = clusterApiUrl('devnet'); // Controls how we want to acknowledge when a transaction is \"done\".\n\nvar opts = {\n  preflightCommitment: \"processed\"\n}; // All your other Twitter and GIF constants you had.\n// Constants\n\nvar TWITTER_HANDLE = 'PenroseXBT';\nvar TWITTER_LINK = \"https://twitter.com/\".concat(TWITTER_HANDLE);\n\nvar App = function App() {\n  // State\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      walletAddress = _useState2[0],\n      setWalletAddress = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      inputValue = _useState4[0],\n      setInputValue = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      gifList = _useState6[0],\n      setGifList = _useState6[1]; // Actions\n\n\n  var checkIfWalletIsConnected = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _window, solana, response;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _window = window, solana = _window.solana;\n\n              if (!solana) {\n                _context.next = 12;\n                break;\n              }\n\n              if (!solana.isPhantom) {\n                _context.next = 10;\n                break;\n              }\n\n              console.log('Phantom wallet found!');\n              _context.next = 7;\n              return solana.connect({\n                onlyIfTrusted: true\n              });\n\n            case 7:\n              response = _context.sent;\n              console.log('Connected with Public Key:', response.publicKey.toString());\n              /*\n               * Set the user's publicKey in state to be used later!\n               */\n\n              setWalletAddress(response.publicKey.toString());\n\n            case 10:\n              _context.next = 13;\n              break;\n\n            case 12:\n              alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\n\n            case 13:\n              _context.next = 18;\n              break;\n\n            case 15:\n              _context.prev = 15;\n              _context.t0 = _context[\"catch\"](0);\n              console.error(_context.t0);\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 15]]);\n    }));\n\n    return function checkIfWalletIsConnected() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var renderConnectedContainer = function renderConnectedContainer() {\n    // If we hit this, it means the program account hasn't been initialized.\n    if (gifList === null) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"connected-container\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        className: \"cta-button submit-gif-button\",\n        onClick: createGifAccount,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }\n      }, \"Do One-Time Initialization For GIF Program Account\"));\n    } // Otherwise, we're good! Account exists. User can submit GIFs.\n    else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"connected-container\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"form\", {\n        onSubmit: function onSubmit(event) {\n          event.preventDefault();\n          sendGif();\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter gif link!\",\n        value: inputValue,\n        onChange: onInputChange,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(\"button\", {\n        type: \"submit\",\n        className: \"cta-button submit-gif-button\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 15\n        }\n      }, \"Submit\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"gif-grid\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }\n      }, gifList.map(function (item, index) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"gif-item\",\n          key: index,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(\"img\", {\n          src: item.gifLink,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 19\n          }\n        }));\n      })));\n    }\n  };\n\n  var getProvider = function getProvider() {\n    var connection = new Connection(network, opts.preflightCommitment);\n    var provider = new Provider(connection, window.solana, opts.preflightCommitment);\n    return provider;\n  };\n\n  var createGifAccount = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var provider, program;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              provider = getProvider();\n              program = new Program(idl, programID, provider);\n              console.log(\"ping\");\n              _context2.next = 6;\n              return program.rpc.startStuffOff({\n                accounts: {\n                  baseAccount: baseAccount.publicKey,\n                  user: provider.wallet.publicKey,\n                  systemProgram: SystemProgram.programId\n                },\n                signers: [baseAccount]\n              });\n\n            case 6:\n              console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString());\n              _context2.next = 9;\n              return getGifList();\n\n            case 9:\n              _context2.next = 14;\n              break;\n\n            case 11:\n              _context2.prev = 11;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.log(\"Error creating BaseAccount account:\", _context2.t0);\n\n            case 14:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 11]]);\n    }));\n\n    return function createGifAccount() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var sendGif = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var provider, program;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!(inputValue.length === 0)) {\n                _context3.next = 3;\n                break;\n              }\n\n              console.log(\"No gif link given!\");\n              return _context3.abrupt(\"return\");\n\n            case 3:\n              setInputValue('');\n              console.log('Gif link:', inputValue);\n              _context3.prev = 5;\n              provider = getProvider();\n              program = new Program(idl, programID, provider);\n              _context3.next = 10;\n              return program.rpc.addGif(inputValue, {\n                accounts: {\n                  baseAccount: baseAccount.publicKey,\n                  user: provider.wallet.publicKey\n                }\n              });\n\n            case 10:\n              console.log(\"GIF successfully sent to program\", inputValue);\n              _context3.next = 13;\n              return getGifList();\n\n            case 13:\n              _context3.next = 18;\n              break;\n\n            case 15:\n              _context3.prev = 15;\n              _context3.t0 = _context3[\"catch\"](5);\n              console.log(\"Error sending GIF:\", _context3.t0);\n\n            case 18:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[5, 15]]);\n    }));\n\n    return function sendGif() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var connectWallet = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      var _window2, solana, response;\n\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _window2 = window, solana = _window2.solana;\n\n              if (!solana) {\n                _context4.next = 7;\n                break;\n              }\n\n              _context4.next = 4;\n              return solana.connect();\n\n            case 4:\n              response = _context4.sent;\n              console.log('Connected with Public Key:', response.publicKey.toString());\n              setWalletAddress(response.publicKey.toString());\n\n            case 7:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function connectWallet() {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  var onInputChange = function onInputChange(event) {\n    var value = event.target.value;\n    setInputValue(value);\n  };\n  /*\n   * We want to render this UI when the user hasn't connected\n   * their wallet to our app yet.\n   */\n\n\n  var renderNotConnectedContainer = function renderNotConnectedContainer() {\n    return /*#__PURE__*/React.createElement(\"button\", {\n      className: \"cta-button connect-wallet-button\",\n      onClick: connectWallet,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 5\n      }\n    }, \"Connect to Wallet\");\n  }; // UseEffects\n\n\n  useEffect(function () {\n    var onLoad = /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return checkIfWalletIsConnected();\n\n              case 2:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      return function onLoad() {\n        return _ref5.apply(this, arguments);\n      };\n    }();\n\n    window.addEventListener('load', onLoad);\n    return function () {\n      return window.removeEventListener('load', onLoad);\n    };\n  }, []);\n\n  var getGifList = /*#__PURE__*/function () {\n    var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n      var provider, program, account;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.prev = 0;\n              provider = getProvider();\n              program = new Program(idl, programID, provider);\n              _context6.next = 5;\n              return program.account.baseAccount.fetch(baseAccount.publicKey);\n\n            case 5:\n              account = _context6.sent;\n              console.log(\"Got the account\", account);\n              setGifList(account.gifList);\n              _context6.next = 14;\n              break;\n\n            case 10:\n              _context6.prev = 10;\n              _context6.t0 = _context6[\"catch\"](0);\n              console.log(\"Error in getGifList: \", _context6.t0);\n              setGifList(null);\n\n            case 14:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, null, [[0, 10]]);\n    }));\n\n    return function getGifList() {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    if (walletAddress) {\n      console.log('Fetching GIF list...');\n      getGifList();\n    }\n  }, [walletAddress]);\n  /*\n     * When our component first mounts, let's check to see if we have a connected\n     * Phantom Wallet\n     */\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"header\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 11\n    }\n  }, \"Billionaire Portal\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"sub-text\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 11\n    }\n  }, \"I made this Portal \\u2728\"), !walletAddress && renderNotConnectedContainer(), walletAddress && renderConnectedContainer()), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    alt: \"Twitter Logo\",\n    className: \"twitter-logo\",\n    src: twitterLogo,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"a\", {\n    className: \"footer-text\",\n    href: TWITTER_LINK,\n    target: \"_blank\",\n    rel: \"noreferrer\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 11\n    }\n  }, \"built by @PenroseXBT\"))));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/user/Desktop/app/src/App.js"],"names":["Connection","PublicKey","clusterApiUrl","Program","Provider","web3","React","useEffect","useState","kp","idl","SystemProgram","Keypair","arr","Object","values","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","metadata","address","network","opts","preflightCommitment","TWITTER_HANDLE","TWITTER_LINK","App","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletIsConnected","window","solana","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","toString","alert","error","renderConnectedContainer","createGifAccount","event","preventDefault","sendGif","onInputChange","map","item","index","gifLink","getProvider","connection","provider","program","rpc","startStuffOff","accounts","user","wallet","systemProgram","programId","signers","getGifList","length","addGif","connectWallet","value","target","renderNotConnectedContainer","onLoad","addEventListener","removeEventListener","account","fetch","twitterLogo"],"mappings":";;;;;;;AAAA,SAASA,UAAT,EAAqBC,SAArB,EAAgCC,aAAhC,QAAqD,iBAArD;AACA,SAASC,OAAT,EAAkBC,QAAlB,EAA4BC,IAA5B,QAAwC,uBAAxC;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;AAEA,OAAOC,EAAP,MAAe,gBAAf;AACA,OAAO,WAAP;AACA,OAAOC,GAAP,MAAgB,YAAhB,C,CAEA;;IACQC,a,GAA2BN,I,CAA3BM,a;IAAeC,O,GAAYP,I,CAAZO,O,EAEvB;;AACA,IAAMC,GAAG,GAAGC,MAAM,CAACC,MAAP,CAAcN,EAAE,CAACO,QAAH,CAAYC,SAA1B,CAAZ;AACA,IAAMC,MAAM,GAAG,IAAIC,UAAJ,CAAeN,GAAf,CAAf;AACA,IAAMO,WAAW,GAAGf,IAAI,CAACO,OAAL,CAAaS,aAAb,CAA2BH,MAA3B,CAApB,C,CAEA;;AACA,IAAMI,SAAS,GAAG,IAAIrB,SAAJ,CAAcS,GAAG,CAACa,QAAJ,CAAaC,OAA3B,CAAlB,C,CACA;;AACA,IAAMC,OAAO,GAAGvB,aAAa,CAAC,QAAD,CAA7B,C,CAEA;;AACA,IAAMwB,IAAI,GAAG;AACXC,EAAAA,mBAAmB,EAAE;AADV,CAAb,C,CAGA;AAEA;;AACA,IAAMC,cAAc,GAAG,YAAvB;AACA,IAAMC,YAAY,iCAA0BD,cAA1B,CAAlB;;AAGA,IAAME,GAAG,GAAG,SAANA,GAAM,GAAM;AAChB;AADgB,kBAE0BtB,QAAQ,CAAC,IAAD,CAFlC;AAAA;AAAA,MAETuB,aAFS;AAAA,MAEMC,gBAFN;;AAAA,mBAGoBxB,QAAQ,CAAC,EAAD,CAH5B;AAAA;AAAA,MAGTyB,UAHS;AAAA,MAGGC,aAHH;;AAAA,mBAIc1B,QAAQ,CAAC,EAAD,CAJtB;AAAA;AAAA,MAIT2B,OAJS;AAAA,MAIAC,UAJA,kBAOhB;;;AACA,MAAMC,wBAAwB;AAAA,wEAAG;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAEVC,MAFU,EAErBC,MAFqB,WAErBA,MAFqB;;AAAA,mBAIzBA,MAJyB;AAAA;AAAA;AAAA;;AAAA,mBAKvBA,MAAM,CAACC,SALgB;AAAA;AAAA;AAAA;;AAMzBC,cAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AANyB;AAAA,qBAOFH,MAAM,CAACI,OAAP,CAAe;AAAEC,gBAAAA,aAAa,EAAE;AAAjB,eAAf,CAPE;;AAAA;AAOnBC,cAAAA,QAPmB;AAQzBJ,cAAAA,OAAO,CAACC,GAAR,CACE,4BADF,EAEEG,QAAQ,CAACC,SAAT,CAAmBC,QAAnB,EAFF;AAKA;AACV;AACA;;AACUf,cAAAA,gBAAgB,CAACa,QAAQ,CAACC,SAAT,CAAmBC,QAAnB,EAAD,CAAhB;;AAhByB;AAAA;AAAA;;AAAA;AAmB3BC,cAAAA,KAAK,CAAC,kDAAD,CAAL;;AAnB2B;AAAA;AAAA;;AAAA;AAAA;AAAA;AAsB7BP,cAAAA,OAAO,CAACQ,KAAR;;AAtB6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAxBZ,wBAAwB;AAAA;AAAA;AAAA,KAA9B;;AA4BA,MAAMa,wBAAwB,GAAG,SAA3BA,wBAA2B,GAAM;AACrC;AACE,QAAIf,OAAO,KAAK,IAAhB,EAAsB;AACpB,0BACE;AAAK,QAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAQ,QAAA,SAAS,EAAC,8BAAlB;AAAiD,QAAA,OAAO,EAAEgB,gBAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8DADF,CADF;AAOD,KARD,CASA;AATA,SAUK;AACH,0BACE;AAAK,QAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AACE,QAAA,QAAQ,EAAE,kBAACC,KAAD,EAAW;AACnBA,UAAAA,KAAK,CAACC,cAAN;AACAC,UAAAA,OAAO;AACR,SAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAME;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,WAAW,EAAC,iBAFd;AAGE,QAAA,KAAK,EAAErB,UAHT;AAIE,QAAA,QAAQ,EAAEsB,aAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANF,eAYE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,SAAS,EAAC,8BAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAZF,CADF,eAiBE;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEGpB,OAAO,CAACqB,GAAR,CAAY,UAACC,IAAD,EAAOC,KAAP;AAAA,4BACX;AAAK,UAAA,SAAS,EAAC,UAAf;AAA0B,UAAA,GAAG,EAAEA,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACE;AAAK,UAAA,GAAG,EAAED,IAAI,CAACE,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CADW;AAAA,OAAZ,CAFH,CAjBF,CADF;AA4BD;AACF,GA1CH;;AA2CA,MAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxB,QAAMC,UAAU,GAAG,IAAI7D,UAAJ,CAAeyB,OAAf,EAAwBC,IAAI,CAACC,mBAA7B,CAAnB;AACA,QAAMmC,QAAQ,GAAG,IAAI1D,QAAJ,CACfyD,UADe,EACHvB,MAAM,CAACC,MADJ,EACYb,IAAI,CAACC,mBADjB,CAAjB;AAGA,WAAOmC,QAAP;AACD,GAND;;AAQA,MAAMX,gBAAgB;AAAA,yEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEfW,cAAAA,QAFe,GAEJF,WAAW,EAFP;AAGfG,cAAAA,OAHe,GAGL,IAAI5D,OAAJ,CAAYO,GAAZ,EAAiBY,SAAjB,EAA4BwC,QAA5B,CAHK;AAIrBrB,cAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AAJqB;AAAA,qBAKfqB,OAAO,CAACC,GAAR,CAAYC,aAAZ,CAA0B;AAC9BC,gBAAAA,QAAQ,EAAE;AACR9C,kBAAAA,WAAW,EAAEA,WAAW,CAAC0B,SADjB;AAERqB,kBAAAA,IAAI,EAAEL,QAAQ,CAACM,MAAT,CAAgBtB,SAFd;AAGRuB,kBAAAA,aAAa,EAAE1D,aAAa,CAAC2D;AAHrB,iBADoB;AAM9BC,gBAAAA,OAAO,EAAE,CAACnD,WAAD;AANqB,eAA1B,CALe;;AAAA;AAarBqB,cAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ,EAAqDtB,WAAW,CAAC0B,SAAZ,CAAsBC,QAAtB,EAArD;AAbqB;AAAA,qBAcfyB,UAAU,EAdK;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAiBrB/B,cAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ;;AAjBqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAhBS,gBAAgB;AAAA;AAAA;AAAA,KAAtB;;AAqBA,MAAMG,OAAO;AAAA,yEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACVrB,UAAU,CAACwC,MAAX,KAAsB,CADZ;AAAA;AAAA;AAAA;;AAEZhC,cAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AAFY;;AAAA;AAKdR,cAAAA,aAAa,CAAC,EAAD,CAAb;AACAO,cAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBT,UAAzB;AANc;AAQN6B,cAAAA,QARM,GAQKF,WAAW,EARhB;AASNG,cAAAA,OATM,GASI,IAAI5D,OAAJ,CAAYO,GAAZ,EAAiBY,SAAjB,EAA4BwC,QAA5B,CATJ;AAAA;AAAA,qBAWNC,OAAO,CAACC,GAAR,CAAYU,MAAZ,CAAmBzC,UAAnB,EAA+B;AACnCiC,gBAAAA,QAAQ,EAAE;AACR9C,kBAAAA,WAAW,EAAEA,WAAW,CAAC0B,SADjB;AAERqB,kBAAAA,IAAI,EAAEL,QAAQ,CAACM,MAAT,CAAgBtB;AAFd;AADyB,eAA/B,CAXM;;AAAA;AAiBZL,cAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ,EAAgDT,UAAhD;AAjBY;AAAA,qBAmBNuC,UAAU,EAnBJ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAqBZ/B,cAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;;AArBY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAPY,OAAO;AAAA;AAAA;AAAA,KAAb;;AAyBA,MAAMqB,aAAa;AAAA,yEAAG;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,yBACDrC,MADC,EACZC,MADY,YACZA,MADY;;AAAA,mBAGhBA,MAHgB;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAIKA,MAAM,CAACI,OAAP,EAJL;;AAAA;AAIZE,cAAAA,QAJY;AAKlBJ,cAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CG,QAAQ,CAACC,SAAT,CAAmBC,QAAnB,EAA1C;AACAf,cAAAA,gBAAgB,CAACa,QAAQ,CAACC,SAAT,CAAmBC,QAAnB,EAAD,CAAhB;;AANkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAb4B,aAAa;AAAA;AAAA;AAAA,KAAnB;;AASA,MAAMpB,aAAa,GAAG,SAAhBA,aAAgB,CAACH,KAAD,EAAW;AAAA,QACvBwB,KADuB,GACbxB,KAAK,CAACyB,MADO,CACvBD,KADuB;AAE/B1C,IAAAA,aAAa,CAAC0C,KAAD,CAAb;AACD,GAHD;AAIA;AACF;AACA;AACA;;;AACE,MAAME,2BAA2B,GAAG,SAA9BA,2BAA8B;AAAA,wBAClC;AACE,MAAA,SAAS,EAAC,kCADZ;AAEE,MAAA,OAAO,EAAEH,aAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADkC;AAAA,GAApC,CAtJgB,CA+JhB;;;AACApE,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMwE,MAAM;AAAA,2EAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACP1C,wBAAwB,EADjB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAN0C,MAAM;AAAA;AAAA;AAAA,OAAZ;;AAGAzC,IAAAA,MAAM,CAAC0C,gBAAP,CAAwB,MAAxB,EAAgCD,MAAhC;AACA,WAAO;AAAA,aAAMzC,MAAM,CAAC2C,mBAAP,CAA2B,MAA3B,EAAmCF,MAAnC,CAAN;AAAA,KAAP;AACD,GANQ,EAMN,EANM,CAAT;;AAQA,MAAMP,UAAU;AAAA,yEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAETV,cAAAA,QAFS,GAEEF,WAAW,EAFb;AAGTG,cAAAA,OAHS,GAGC,IAAI5D,OAAJ,CAAYO,GAAZ,EAAiBY,SAAjB,EAA4BwC,QAA5B,CAHD;AAAA;AAAA,qBAIOC,OAAO,CAACmB,OAAR,CAAgB9D,WAAhB,CAA4B+D,KAA5B,CAAkC/D,WAAW,CAAC0B,SAA9C,CAJP;;AAAA;AAIToC,cAAAA,OAJS;AAMfzC,cAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BwC,OAA/B;AACA9C,cAAAA,UAAU,CAAC8C,OAAO,CAAC/C,OAAT,CAAV;AAPe;AAAA;;AAAA;AAAA;AAAA;AAUfM,cAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACAN,cAAAA,UAAU,CAAC,IAAD,CAAV;;AAXe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAVoC,UAAU;AAAA;AAAA;AAAA,KAAhB;;AAeAjE,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIwB,aAAJ,EAAmB;AACjBU,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACA8B,MAAAA,UAAU;AACX;AACF,GALQ,EAKN,CAACzC,aAAD,CALM,CAAT;AAMF;AACA;AACA;AACA;;AAEE,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAG,IAAA,SAAS,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ,eAEI;AAAG,IAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAFJ,EAKK,CAACA,aAAD,IAAkB+C,2BAA2B,EALlD,EAOG/C,aAAa,IAAImB,wBAAwB,EAP5C,CADF,eAUI;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,GAAG,EAAC,cAAT;AAAwB,IAAA,SAAS,EAAC,cAAlC;AAAiD,IAAA,GAAG,EAAEkC,WAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AACE,IAAA,SAAS,EAAC,aADZ;AAEE,IAAA,IAAI,EAAEvD,YAFR;AAGE,IAAA,MAAM,EAAC,QAHT;AAIE,IAAA,GAAG,EAAC,YAJN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAFF,CAVJ,CADA,CADF;AAwBD,CA1ND;;AA4NA,eAAeC,GAAf","sourcesContent":["import { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\nimport React, { useEffect, useState } from 'react';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport kp from './keypair.json';\nimport './App.css';\nimport idl from './idl.json';\n\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram, Keypair } = web3;\n\n// Create a keypair for the account that will hold the GIF data.\nconst arr = Object.values(kp._keypair.secretKey)\nconst secret = new Uint8Array(arr)\nconst baseAccount = web3.Keypair.fromSecretKey(secret)\n\n// Get our program's id from the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n// Set our network to devnet.\nconst network = clusterApiUrl('devnet');\n\n// Controls how we want to acknowledge when a transaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\"\n}\n// All your other Twitter and GIF constants you had.\n\n// Constants\nconst TWITTER_HANDLE = 'PenroseXBT';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\n\nconst App = () => {\n  // State\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]);\n  \n\n  // Actions\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n            'Connected with Public Key:',\n            response.publicKey.toString()\n          );\n\n          /*\n           * Set the user's publicKey in state to be used later!\n           */\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n\n  \n  const renderConnectedContainer = () => {\n    // If we hit this, it means the program account hasn't been initialized.\n      if (gifList === null) {\n        return (\n          <div className=\"connected-container\">\n            <button className=\"cta-button submit-gif-button\" onClick={createGifAccount}>\n              Do One-Time Initialization For GIF Program Account\n            </button>\n          </div>\n        )\n      } \n      // Otherwise, we're good! Account exists. User can submit GIFs.\n      else {\n        return(\n          <div className=\"connected-container\">\n            <form\n              onSubmit={(event) => {\n                event.preventDefault();\n                sendGif();\n              }}\n            >\n              <input\n                type=\"text\"\n                placeholder=\"Enter gif link!\"\n                value={inputValue}\n                onChange={onInputChange}\n              />\n              <button type=\"submit\" className=\"cta-button submit-gif-button\">\n                Submit\n              </button>\n            </form>\n            <div className=\"gif-grid\">\n              {/* We use index as the key instead, also, the src is now item.gifLink */}\n              {gifList.map((item, index) => (\n                <div className=\"gif-item\" key={index}>\n                  <img src={item.gifLink} />\n                </div>\n              ))}\n            </div>\n          </div>\n        )\n      }\n    }\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection, window.solana, opts.preflightCommitment,\n    );\n    return provider;\n  }\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"ping\")\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount]\n      });\n      console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString())\n      await getGifList();\n  \n    } catch(error) {\n      console.log(\"Error creating BaseAccount account:\", error)\n    }\n  }\n\n  const sendGif = async () => {\n    if (inputValue.length === 0) {\n      console.log(\"No gif link given!\")\n      return\n    }\n    setInputValue('');\n    console.log('Gif link:', inputValue);\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n  \n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log(\"GIF successfully sent to program\", inputValue)\n  \n      await getGifList();\n    } catch (error) {\n      console.log(\"Error sending GIF:\", error)\n    }\n  };\n\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with Public Key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());}\n  };\n\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n  /*\n   * We want to render this UI when the user hasn't connected\n   * their wallet to our app yet.\n   */\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  // UseEffects\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n\n  const getGifList = async() => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n      \n      console.log(\"Got the account\", account)\n      setGifList(account.gifList)\n  \n    } catch (error) {\n      console.log(\"Error in getGifList: \", error)\n      setGifList(null);\n    }\n  }\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching GIF list...');\n      getGifList()\n    }\n  }, [walletAddress]);\n/*\n   * When our component first mounts, let's check to see if we have a connected\n   * Phantom Wallet\n   */\n\n  return (\n    <div className=\"App\">\n    <div className=\"container\">\n      <div className=\"header-container\">\n          <p className=\"header\">Billionaire Portal</p>\n          <p className=\"sub-text\">\n            I made this Portal âœ¨\n          </p>\n          {!walletAddress && renderNotConnectedContainer()}\n        {/* We just need to add the inverse here! */}\n        {walletAddress && renderConnectedContainer()}\n        </div>\n        <div className=\"header\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built by @PenroseXBT`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}