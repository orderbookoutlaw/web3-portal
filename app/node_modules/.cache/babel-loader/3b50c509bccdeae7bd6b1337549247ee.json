{"ast":null,"code":"import _regeneratorRuntime from \"/Users/user/Desktop/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/user/Desktop/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/user/Desktop/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/user/Desktop/app/src/App.js\";\n\nimport React, { useEffect, useState } from 'react';\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport './App.css'; // All your other Twitter and GIF constants you had.\n// Constants\n\nvar TWITTER_HANDLE = 'PenroseXBT';\nvar TWITTER_LINK = \"https://twitter.com/\".concat(TWITTER_HANDLE);\n\nvar App = function App() {\n  // State\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      walletAddress = _useState2[0],\n      setWalletAddress = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      inputValue = _useState4[0],\n      setInputValue = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      gifList = _useState6[0],\n      setGifList = _useState6[1];\n\n  useEffect(function () {\n    var onLoad = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return checkIfWalletIsConnected();\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function onLoad() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    window.addEventListener('load', onLoad);\n    return function () {\n      return window.removeEventListener('load', onLoad);\n    };\n  }, []);\n  useEffect(function () {\n    if (walletAddress) {\n      console.log('Fetching GIF list...'); // Call Solana program here.\n      // Set state\n\n      setGifList(TEST_GIFS);\n    }\n  }, [walletAddress]); // Actions\n\n  var checkIfWalletIsConnected = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var _window, solana, response;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _window = window, solana = _window.solana;\n\n              if (!solana) {\n                _context2.next = 12;\n                break;\n              }\n\n              if (!solana.isPhantom) {\n                _context2.next = 10;\n                break;\n              }\n\n              console.log('Phantom wallet found!');\n              _context2.next = 7;\n              return solana.connect({\n                onlyIfTrusted: true\n              });\n\n            case 7:\n              response = _context2.sent;\n              console.log('Connected with Public Key:', response.publicKey.toString());\n              /*\n               * Set the user's publicKey in state to be used later!\n               */\n\n              setWalletAddress(response.publicKey.toString());\n\n            case 10:\n              _context2.next = 13;\n              break;\n\n            case 12:\n              alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\n\n            case 13:\n              _context2.next = 18;\n              break;\n\n            case 15:\n              _context2.prev = 15;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.error(_context2.t0);\n\n            case 18:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 15]]);\n    }));\n\n    return function checkIfWalletIsConnected() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var connectWallet = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function connectWallet() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var renderNotConnectedContainer = function renderNotConnectedContainer() {\n    return /*#__PURE__*/React.createElement(\"button\", {\n      className: \"cta-button connect-wallet-button\",\n      onClick: connectWallet,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 5\n      }\n    }, \"Connect to Wallet\");\n  }; // UseEffects\n\n\n  useEffect(function () {\n    var onLoad = /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return checkIfWalletIsConnected();\n\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function onLoad() {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n\n    window.addEventListener('load', onLoad);\n    return function () {\n      return window.removeEventListener('load', onLoad);\n    };\n  }, []);\n  /*\n     * When our component first mounts, let's check to see if we have a connected\n     * Phantom Wallet\n     */\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: walletAddress ? 'authed-container' : 'container',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"header\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }, \"Billionaire Portal\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"sub-text\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }, \"I made this Portal \\u2728\"), !walletAddress && renderNotConnectedContainer()), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"footer-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    alt: \"Twitter Logo\",\n    className: \"twitter-logo\",\n    src: twitterLogo,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"a\", {\n    className: \"footer-text\",\n    href: TWITTER_LINK,\n    target: \"_blank\",\n    rel: \"noreferrer\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }\n  }, \"built by @PenroseXBT}\"))));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/user/Desktop/app/src/App.js"],"names":["React","useEffect","useState","TWITTER_HANDLE","TWITTER_LINK","App","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","onLoad","checkIfWalletIsConnected","window","addEventListener","removeEventListener","console","log","TEST_GIFS","solana","isPhantom","connect","onlyIfTrusted","response","publicKey","toString","alert","error","connectWallet","renderNotConnectedContainer","twitterLogo"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\n\n// All your other Twitter and GIF constants you had.\n\n// Constants\nconst TWITTER_HANDLE = 'PenroseXBT';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\n\nconst App = () => {\n  // State\n\nconst [walletAddress, setWalletAddress] = useState(null);\nconst [inputValue, setInputValue] = useState('');\nconst [gifList, setGifList] = useState([]);\n\nuseEffect(() => {\n  const onLoad = async () => {\n    await checkIfWalletIsConnected();\n  };\n  window.addEventListener('load', onLoad);\n  return () => window.removeEventListener('load', onLoad);\n}, []);\n\nuseEffect(() => {\n  if (walletAddress) {\n    console.log('Fetching GIF list...');\n    \n    // Call Solana program here.\n\n    // Set state\n    setGifList(TEST_GIFS);\n  }\n}, [walletAddress]);\n\n\n  // Actions\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n            'Connected with Public Key:',\n            response.publicKey.toString()\n          );\n\n          /*\n           * Set the user's publicKey in state to be used later!\n           */\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {};\n\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  // UseEffects\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n\n/*\n   * When our component first mounts, let's check to see if we have a connected\n   * Phantom Wallet\n   */\n\n  return (\n    <div className=\"App\">\n            \t{/* This was solely added for some styling fanciness */}\n\t\t\t        <div className={walletAddress ? 'authed-container' : 'container'}>\n        <div className=\"header-container\">\n          <p className=\"header\">Billionaire Portal</p>\n          <p className=\"sub-text\">\n            I made this Portal âœ¨\n          </p>\n          {/* Add the condition to show this only if we don't have a wallet address */}\n          {!walletAddress && renderNotConnectedContainer()}\n\n\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built by @PenroseXBT}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}