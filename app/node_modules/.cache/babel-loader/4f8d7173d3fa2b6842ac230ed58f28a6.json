{"ast":null,"code":"import _regeneratorRuntime from \"/Users/user/Desktop/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/user/Desktop/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/user/Desktop/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/user/Desktop/app/src/App.js\";\n\nimport React, { useEffect, useState } from 'react';\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport './App.css';\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\nimport idl from './idl.json'; // SystemProgram is a reference to the Solana runtime!\n\nvar SystemProgram = web3.SystemProgram,\n    Keypair = web3.Keypair; // Create a keypair for the account that will hold the GIF data.\n\nvar baseAccount = Keypair.generate(); // Get our program's id from the IDL file.\n\nvar programID = new PublicKey(idl.metadata.address); // Set our network to devnet.\n\nvar network = clusterApiUrl('devnet'); // Controls how we want to acknowledge when a transaction is \"done\".\n\nvar opts = {\n  preflightCommitment: \"finalized\"\n}; // All your other Twitter and GIF constants you had.\n// Constants\n\nvar TWITTER_HANDLE = 'PenroseXBT';\nvar TWITTER_LINK = \"https://twitter.com/\".concat(TWITTER_HANDLE);\n\nvar App = function App() {\n  /*\n   * This function holds the logic for deciding if a Phantom Wallet is\n   * connected or not\n   */\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      walletAddress = _useState2[0],\n      setWalletAddress = _useState2[1];\n\n  var checkIfWalletIsConnected = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _window, solana, response;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _window = window, solana = _window.solana;\n\n              if (!solana) {\n                _context.next = 12;\n                break;\n              }\n\n              if (!solana.isPhantom) {\n                _context.next = 10;\n                break;\n              }\n\n              console.log('Phantom wallet found!');\n              _context.next = 7;\n              return solana.connect({\n                onlyIfTrusted: true\n              });\n\n            case 7:\n              response = _context.sent;\n              console.log('Connected with Public Key:', response.publicKey.toString());\n              setWalletAddress(response.publicKey.toString());\n\n            case 10:\n              _context.next = 13;\n              break;\n\n            case 12:\n              alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\n\n            case 13:\n              _context.next = 18;\n              break;\n\n            case 15:\n              _context.prev = 15;\n              _context.t0 = _context[\"catch\"](0);\n              console.error(_context.t0);\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 15]]);\n    }));\n\n    return function checkIfWalletIsConnected() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  /*\n   * Let's define this method so our code doesn't break.\n   * We will write the logic for this next!\n   */\n\n\n  var connectWallet = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var _window2, solana, response, TEST_GIFS, renderNotConnectedContainer, renderConnectedContainer;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _window2 = window, solana = _window2.solana;\n\n              if (!solana) {\n                _context2.next = 7;\n                break;\n              }\n\n              _context2.next = 4;\n              return solana.connect();\n\n            case 4:\n              response = _context2.sent;\n              console.log('Connected with Public Key:', response.publicKey.toString());\n              setWalletAddress(response.publicKey.toString());\n\n            case 7:\n              TEST_GIFS = ['https://media.giphy.com/media/aCMs4R19KMYq9JewMy/giphy.webp'];\n              /*\n               * We want to render this UI when the user hasn't connected\n               * their wallet to our app yet.\n               */\n\n              renderNotConnectedContainer = function renderNotConnectedContainer() {\n                return /*#__PURE__*/React.createElement(\"button\", {\n                  className: \"cta-button connect-wallet-button\",\n                  onClick: connectWallet,\n                  __self: _this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 89,\n                    columnNumber: 5\n                  }\n                }, \"Connect to Wallet\");\n              };\n\n              renderConnectedContainer = function renderConnectedContainer() {\n                return /*#__PURE__*/React.createElement(\"div\", {\n                  className: \"connected-container\",\n                  __self: _this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 98,\n                    columnNumber: 3\n                  }\n                }, /*#__PURE__*/React.createElement(\"form\", {\n                  onSubmit: function onSubmit(event) {\n                    event.preventDefault();\n                  },\n                  __self: _this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 100,\n                    columnNumber: 5\n                  }\n                }, /*#__PURE__*/React.createElement(\"input\", {\n                  type: \"text\",\n                  placeholder: \"Enter gif link!\",\n                  __self: _this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 105,\n                    columnNumber: 7\n                  }\n                }), /*#__PURE__*/React.createElement(\"button\", {\n                  type: \"submit\",\n                  className: \"cta-button submit-gif-button\",\n                  __self: _this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 106,\n                    columnNumber: 7\n                  }\n                }, \"Submit\")), /*#__PURE__*/React.createElement(\"div\", {\n                  className: \"gif-grid\",\n                  __self: _this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 108,\n                    columnNumber: 5\n                  }\n                }, TEST_GIFS.map(function (gif) {\n                  return /*#__PURE__*/React.createElement(\"div\", {\n                    className: \"gif-item\",\n                    key: gif,\n                    __self: _this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 110,\n                      columnNumber: 9\n                    }\n                  }, /*#__PURE__*/React.createElement(\"img\", {\n                    src: gif,\n                    alt: gif,\n                    __self: _this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 111,\n                      columnNumber: 11\n                    }\n                  }));\n                })));\n              };\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function connectWallet() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  /*\n     * When our component first mounts, let's check to see if we have a connected\n     * Phantom Wallet\n     */\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: walletAddress ? 'authed-container' : 'container',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"header\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 11\n    }\n  }, \"Billionaire Portal\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"sub-text\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 11\n    }\n  }, \"I made this Portal \\u2728\"), !walletAddress && renderNotConnectedContainer(), walletAddress && renderConnectedContainer()), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"footer-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    alt: \"Twitter Logo\",\n    className: \"twitter-logo\",\n    src: twitterLogo,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"a\", {\n    className: \"footer-text\",\n    href: TWITTER_LINK,\n    target: \"_blank\",\n    rel: \"noreferrer\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 11\n    }\n  }, \"built by @PenroseXBT}\"))));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/user/Desktop/app/src/App.js"],"names":["React","useEffect","useState","Connection","PublicKey","clusterApiUrl","Program","Provider","web3","idl","SystemProgram","Keypair","baseAccount","generate","programID","metadata","address","network","opts","preflightCommitment","TWITTER_HANDLE","TWITTER_LINK","App","walletAddress","setWalletAddress","checkIfWalletIsConnected","window","solana","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","toString","alert","error","connectWallet","TEST_GIFS","renderNotConnectedContainer","renderConnectedContainer","event","preventDefault","map","gif","twitterLogo"],"mappings":";;;;;;;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;AAEA,OAAO,WAAP;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,aAAhC,QAAoD,iBAApD;AACA,SACEC,OADF,EACWC,QADX,EACqBC,IADrB,QAEO,uBAFP;AAIA,OAAOC,GAAP,MAAgB,YAAhB,C,CAEA;;IACQC,a,GAA2BF,I,CAA3BE,a;IAAeC,O,GAAYH,I,CAAZG,O,EAEvB;;AACA,IAAIC,WAAW,GAAGD,OAAO,CAACE,QAAR,EAAlB,C,CAEA;;AACA,IAAMC,SAAS,GAAG,IAAIV,SAAJ,CAAcK,GAAG,CAACM,QAAJ,CAAaC,OAA3B,CAAlB,C,CAEA;;AACA,IAAMC,OAAO,GAAGZ,aAAa,CAAC,QAAD,CAA7B,C,CAEA;;AACA,IAAMa,IAAI,GAAG;AACXC,EAAAA,mBAAmB,EAAE;AADV,CAAb,C,CAIA;AAEA;;AACA,IAAMC,cAAc,GAAG,YAAvB;AACA,IAAMC,YAAY,iCAA0BD,cAA1B,CAAlB;;AAEA,IAAME,GAAG,GAAG,SAANA,GAAM,GAAM;AAEhB;AACF;AACA;AACA;AALkB,kBAO0BpB,QAAQ,CAAC,IAAD,CAPlC;AAAA;AAAA,MAOTqB,aAPS;AAAA,MAOMC,gBAPN;;AAQhB,MAAMC,wBAAwB;AAAA,wEAAG;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAEVC,MAFU,EAErBC,MAFqB,WAErBA,MAFqB;;AAAA,mBAIzBA,MAJyB;AAAA;AAAA;AAAA;;AAAA,mBAKvBA,MAAM,CAACC,SALgB;AAAA;AAAA;AAAA;;AAMzBC,cAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AANyB;AAAA,qBAOFH,MAAM,CAACI,OAAP,CAAe;AAAEC,gBAAAA,aAAa,EAAE;AAAjB,eAAf,CAPE;;AAAA;AAOnBC,cAAAA,QAPmB;AAQzBJ,cAAAA,OAAO,CAACC,GAAR,CAEA,4BAFA,EAGAG,QAAQ,CAACC,SAAT,CAAmBC,QAAnB,EAHA;AAMFX,cAAAA,gBAAgB,CAACS,QAAQ,CAACC,SAAT,CAAmBC,QAAnB,EAAD,CAAhB;;AAd2B;AAAA;AAAA;;AAAA;AAiB3BC,cAAAA,KAAK,CAAC,kDAAD,CAAL;;AAjB2B;AAAA;AAAA;;AAAA;AAAA;AAAA;AAoB7BP,cAAAA,OAAO,CAACQ,KAAR;;AApB6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAxBZ,wBAAwB;AAAA;AAAA;AAAA,KAA9B;AAwBA;AACF;AACA;AACA;;;AACE,MAAMa,aAAa;AAAA,yEAAG;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,yBACDZ,MADC,EACZC,MADY,YACZA,MADY;;AAAA,mBAGhBA,MAHgB;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAIKA,MAAM,CAACI,OAAP,EAJL;;AAAA;AAIZE,cAAAA,QAJY;AAKlBJ,cAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CG,QAAQ,CAACC,SAAT,CAAmBC,QAAnB,EAA1C;AACAX,cAAAA,gBAAgB,CAACS,QAAQ,CAACC,SAAT,CAAmBC,QAAnB,EAAD,CAAhB;;AANkB;AAWhBI,cAAAA,SAXgB,GAWJ,CAChB,6DADgB,CAXI;AAatB;AACF;AACA;AACA;;AACQC,cAAAA,2BAjBgB,GAiBc,SAA9BA,2BAA8B;AAAA,oCAClC;AACE,kBAAA,SAAS,EAAC,kCADZ;AAEE,kBAAA,OAAO,EAAEF,aAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCADkC;AAAA,eAjBd;;AA0BlBG,cAAAA,wBA1BkB,GA0BS,SAA3BA,wBAA2B;AAAA,oCAC/B;AAAK,kBAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAEE;AACE,kBAAA,QAAQ,EAAE,kBAACC,KAAD,EAAW;AACnBA,oBAAAA,KAAK,CAACC,cAAN;AACD,mBAHH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAKE;AAAO,kBAAA,IAAI,EAAC,MAAZ;AAAmB,kBAAA,WAAW,EAAC,iBAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBALF,eAME;AAAQ,kBAAA,IAAI,EAAC,QAAb;AAAsB,kBAAA,SAAS,EAAC,8BAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BANF,CAFF,eAUE;AAAK,kBAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACGJ,SAAS,CAACK,GAAV,CAAc,UAACC,GAAD;AAAA,sCACb;AAAK,oBAAA,SAAS,EAAC,UAAf;AAA0B,oBAAA,GAAG,EAAEA,GAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCACE;AAAK,oBAAA,GAAG,EAAEA,GAAV;AAAe,oBAAA,GAAG,EAAEA,GAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,CADa;AAAA,iBAAd,CADH,CAVF,CAD+B;AAAA,eA1BT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAbP,aAAa;AAAA;AAAA;AAAA,KAAnB;AAgDF;AACA;AACA;AACA;;;AAEE,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEO;AAAK,IAAA,SAAS,EAAEf,aAAa,GAAG,kBAAH,GAAwB,WAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACH;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAG,IAAA,SAAS,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,eAEE;AAAG,IAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAFF,EAMG,CAACA,aAAD,IAAkBiB,2BAA2B,EANhD,EAQGjB,aAAa,IAAIkB,wBAAwB,EAR5C,CADG,eAYH;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,GAAG,EAAC,cAAT;AAAwB,IAAA,SAAS,EAAC,cAAlC;AAAiD,IAAA,GAAG,EAAEK,WAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AACE,IAAA,SAAS,EAAC,aADZ;AAEE,IAAA,IAAI,EAAEzB,YAFR;AAGE,IAAA,MAAM,EAAC,QAHT;AAIE,IAAA,GAAG,EAAC,YAJN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAFF,CAZG,CAFP,CADF;AA2BD,CApHD;;AAsHA,eAAeC,GAAf","sourcesContent":["\nimport React, { useEffect, useState } from 'react';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\nimport { Connection, PublicKey, clusterApiUrl} from '@solana/web3.js';\nimport {\n  Program, Provider, web3\n} from '@project-serum/anchor';\n\nimport idl from './idl.json';\n\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram, Keypair } = web3;\n\n// Create a keypair for the account that will hold the GIF data.\nlet baseAccount = Keypair.generate();\n\n// Get our program's id from the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n\n// Set our network to devnet.\nconst network = clusterApiUrl('devnet');\n\n// Controls how we want to acknowledge when a transaction is \"done\".\nconst opts = {\n  preflightCommitment: \"finalized\"\n}\n\n// All your other Twitter and GIF constants you had.\n\n// Constants\nconst TWITTER_HANDLE = 'PenroseXBT';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n\n  /*\n   * This function holds the logic for deciding if a Phantom Wallet is\n   * connected or not\n   */\n\n  const [walletAddress, setWalletAddress] = useState(null)\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n\n          'Connected with Public Key:',\n          response.publicKey.toString()\n        );\n\n        setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  \n  /*\n   * Let's define this method so our code doesn't break.\n   * We will write the logic for this next!\n   */\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with Public Key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n\n\n\n  const TEST_GIFS = [\n    'https://media.giphy.com/media/aCMs4R19KMYq9JewMy/giphy.webp']\n  /*\n   * We want to render this UI when the user hasn't connected\n   * their wallet to our app yet.\n   */\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\nconst renderConnectedContainer = () => (\n  <div className=\"connected-container\">\n    {/* Go ahead and add this input and button to start */}\n    <form\n      onSubmit={(event) => {\n        event.preventDefault();\n      }}\n    >\n      <input type=\"text\" placeholder=\"Enter gif link!\" />\n      <button type=\"submit\" className=\"cta-button submit-gif-button\">Submit</button>\n    </form>\n    <div className=\"gif-grid\">\n      {TEST_GIFS.map((gif) => (\n        <div className=\"gif-item\" key={gif}>\n          <img src={gif} alt={gif} />\n        </div>\n      ))}\n    </div>\n  </div>\n);\n\n      }\n/*\n   * When our component first mounts, let's check to see if we have a connected\n   * Phantom Wallet\n   */\n\n  return (\n    <div className=\"App\">\n            \t{/* This was solely added for some styling fanciness */}\n\t\t\t        <div className={walletAddress ? 'authed-container' : 'container'}>\n        <div className=\"header-container\">\n          <p className=\"header\">Billionaire Portal</p>\n          <p className=\"sub-text\">\n            I made this Portal âœ¨\n          </p>\n          {/* Add the condition to show this only if we don't have a wallet address */}\n          {!walletAddress && renderNotConnectedContainer()}\n          {/* We just need to add the inverse here! */}\n          {walletAddress && renderConnectedContainer()}\n\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built by @PenroseXBT}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}