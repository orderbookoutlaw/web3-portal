{"ast":null,"code":"import _toConsumableArray from \"/Users/user/Desktop/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/user/Desktop/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/user/Desktop/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/user/Desktop/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/user/Desktop/app/src/App.js\";\n\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\nimport React, { useEffect, useState } from 'react';\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport './App.css';\nimport idl from './idl.json'; // SystemProgram is a reference to the Solana runtime!\n\nvar SystemProgram = web3.SystemProgram,\n    Keypair = web3.Keypair; // Create a keypair for the account that will hold the GIF data.\n\nvar baseAccount = Keypair.generate(); // Get our program's id from the IDL file.\n\nvar programID = new PublicKey(idl.metadata.address); // Set our network to devnet.\n\nvar network = clusterApiUrl('devnet'); // Controls how we want to acknowledge when a transaction is \"done\".\n\nvar opts = {\n  preflightCommitment: \"processed\"\n}; // All your other Twitter and GIF constants you had.\n// Constants\n\nvar TWITTER_HANDLE = 'PenroseXBT';\nvar TWITTER_LINK = \"https://twitter.com/\".concat(TWITTER_HANDLE);\nvar TEST_GIFS = ['https://media.giphy.com/media/aCMs4R19KMYq9JewMy/giphy.gif', 'https://media.giphy.com/media/4H994btXFLvrbMXa1E/giphy.gif'];\n\nvar App = function App() {\n  // State\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      walletAddress = _useState2[0],\n      setWalletAddress = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      inputValue = _useState4[0],\n      setInputValue = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      gifList = _useState6[0],\n      setGifList = _useState6[1]; // Actions\n\n\n  var checkIfWalletIsConnected = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _window, solana, response;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _window = window, solana = _window.solana;\n\n              if (!solana) {\n                _context.next = 12;\n                break;\n              }\n\n              if (!solana.isPhantom) {\n                _context.next = 10;\n                break;\n              }\n\n              console.log('Phantom wallet found!');\n              _context.next = 7;\n              return solana.connect({\n                onlyIfTrusted: true\n              });\n\n            case 7:\n              response = _context.sent;\n              console.log('Connected with Public Key:', response.publicKey.toString());\n              /*\n               * Set the user's publicKey in state to be used later!\n               */\n\n              setWalletAddress(response.publicKey.toString());\n\n            case 10:\n              _context.next = 13;\n              break;\n\n            case 12:\n              alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\n\n            case 13:\n              _context.next = 18;\n              break;\n\n            case 15:\n              _context.prev = 15;\n              _context.t0 = _context[\"catch\"](0);\n              console.error(_context.t0);\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 15]]);\n    }));\n\n    return function checkIfWalletIsConnected() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var renderConnectedContainer = function renderConnectedContainer() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"connected-container\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: function onSubmit(event) {\n        event.preventDefault();\n        sendGif();\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter gif link!\",\n      value: inputValue,\n      onChange: onInputChange,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"cta-button submit-gif-button\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }\n    }, \"Submit\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"gif-grid\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }\n    }, gifList.map(function (gif) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"gif-item\",\n        key: gif,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: gif,\n        alt: gif,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }\n      }));\n    })));\n  };\n\n  var getProvider = function getProvider() {\n    var connection = new Connection(network, opts.preflightCommitment);\n    var provider = new Provider(connection, window.solana, opts.preflightCommitment);\n    return provider;\n  };\n\n  var createGifAccount = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var provider, program;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              provider = getProvider();\n              program = new Program(idl, programID, provider);\n              console.log(\"ping\");\n              _context2.next = 6;\n              return program.rpc.startStuffOff({\n                accounts: {\n                  baseAccount: baseAccount.publicKey,\n                  user: provider.wallet.publicKey,\n                  systemProgram: SystemProgram.programId\n                },\n                signers: [baseAccount]\n              });\n\n            case 6:\n              console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString());\n              _context2.next = 9;\n              return getGifList();\n\n            case 9:\n              _context2.next = 14;\n              break;\n\n            case 11:\n              _context2.prev = 11;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.log(\"Error creating BaseAccount account:\", _context2.t0);\n\n            case 14:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[0, 11]]);\n    }));\n\n    return function createGifAccount() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var sendGif = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (inputValue.length > 0) {\n                console.log('Gif link:', inputValue);\n                setGifList([].concat(_toConsumableArray(gifList), [inputValue]));\n                setInputValue('');\n              } else {\n                console.log('Empty input. Try again.');\n              }\n\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function sendGif() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var connectWallet = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      var _window2, solana, response;\n\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _window2 = window, solana = _window2.solana;\n\n              if (!solana) {\n                _context4.next = 7;\n                break;\n              }\n\n              _context4.next = 4;\n              return solana.connect();\n\n            case 4:\n              response = _context4.sent;\n              console.log('Connected with Public Key:', response.publicKey.toString());\n              setWalletAddress(response.publicKey.toString());\n\n            case 7:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function connectWallet() {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  var onInputChange = function onInputChange(event) {\n    var value = event.target.value;\n    setInputValue(value);\n  };\n  /*\n   * We want to render this UI when the user hasn't connected\n   * their wallet to our app yet.\n   */\n\n\n  var renderNotConnectedContainer = function renderNotConnectedContainer() {\n    return /*#__PURE__*/React.createElement(\"button\", {\n      className: \"cta-button connect-wallet-button\",\n      onClick: connectWallet,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 5\n      }\n    }, \"Connect to Wallet\");\n  }; // UseEffects\n\n\n  useEffect(function () {\n    var onLoad = /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return checkIfWalletIsConnected();\n\n              case 2:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      return function onLoad() {\n        return _ref5.apply(this, arguments);\n      };\n    }();\n\n    window.addEventListener('load', onLoad);\n    return function () {\n      return window.removeEventListener('load', onLoad);\n    };\n  }, []);\n\n  var getGifList = /*#__PURE__*/function () {\n    var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n      var provider, program, account;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.prev = 0;\n              provider = getProvider();\n              program = new Program(idl, programID, provider);\n              _context6.next = 5;\n              return program.account.baseAccount.fetch(baseAccount.publicKey);\n\n            case 5:\n              account = _context6.sent;\n              console.log(\"Got the account\", account);\n              setGifList(account.gifList);\n              _context6.next = 14;\n              break;\n\n            case 10:\n              _context6.prev = 10;\n              _context6.t0 = _context6[\"catch\"](0);\n              console.log(\"Error in getGifList: \", _context6.t0);\n              setGifList(null);\n\n            case 14:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, null, [[0, 10]]);\n    }));\n\n    return function getGifList() {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    if (walletAddress) {\n      console.log('Fetching GIF list...'); // Call Solana program here.\n      // Set state\n\n      setGifList(TEST_GIFS);\n    }\n  }, [walletAddress]);\n  /*\n     * When our component first mounts, let's check to see if we have a connected\n     * Phantom Wallet\n     */\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"header\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 11\n    }\n  }, \"Billionaire Portal\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"sub-text\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 11\n    }\n  }, \"I made this Portal \\u2728\"), !walletAddress && renderNotConnectedContainer(), walletAddress && renderConnectedContainer()), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    alt: \"Twitter Logo\",\n    className: \"twitter-logo\",\n    src: twitterLogo,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"a\", {\n    className: \"footer-text\",\n    href: TWITTER_LINK,\n    target: \"_blank\",\n    rel: \"noreferrer\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 11\n    }\n  }, \"built by @PenroseXBT\"))));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/user/Desktop/app/src/App.js"],"names":["Connection","PublicKey","clusterApiUrl","Program","Provider","web3","React","useEffect","useState","idl","SystemProgram","Keypair","baseAccount","generate","programID","metadata","address","network","opts","preflightCommitment","TWITTER_HANDLE","TWITTER_LINK","TEST_GIFS","App","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletIsConnected","window","solana","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","toString","alert","error","renderConnectedContainer","event","preventDefault","sendGif","onInputChange","map","gif","getProvider","connection","provider","createGifAccount","program","rpc","startStuffOff","accounts","user","wallet","systemProgram","programId","signers","getGifList","length","connectWallet","value","target","renderNotConnectedContainer","onLoad","addEventListener","removeEventListener","account","fetch","twitterLogo"],"mappings":"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","sourcesContent":["import { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\nimport React, { useEffect, useState } from 'react';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\nimport idl from './idl.json';\n\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram, Keypair } = web3;\n\n// Create a keypair for the account that will hold the GIF data.\nlet baseAccount = Keypair.generate();\n\n// Get our program's id from the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n// Set our network to devnet.\nconst network = clusterApiUrl('devnet');\n\n// Controls how we want to acknowledge when a transaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\"\n}\n// All your other Twitter and GIF constants you had.\n\n// Constants\nconst TWITTER_HANDLE = 'PenroseXBT';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst TEST_GIFS = ['https://media.giphy.com/media/aCMs4R19KMYq9JewMy/giphy.gif','https://media.giphy.com/media/4H994btXFLvrbMXa1E/giphy.gif'] \n\nconst App = () => {\n  // State\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]);\n  \n\n  // Actions\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n            'Connected with Public Key:',\n            response.publicKey.toString()\n          );\n\n          /*\n           * Set the user's publicKey in state to be used later!\n           */\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const renderConnectedContainer = () => (\n    <div className=\"connected-container\">\n      <form\n        onSubmit={(event) => {\n          event.preventDefault();\n          sendGif();\n        }}\n      >\n        <input\n          type=\"text\"\n          placeholder=\"Enter gif link!\"\n          value={inputValue}\n          onChange={onInputChange}\n        />\n        <button type=\"submit\" className=\"cta-button submit-gif-button\">\n          Submit\n        </button>\n      </form>\n      <div className=\"gif-grid\">\n        {/* Map through gifList instead of TEST_GIFS */}\n        {gifList.map((gif) => (\n          <div className=\"gif-item\" key={gif}>\n            <img src={gif} alt={gif} />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection, window.solana, opts.preflightCommitment,\n    );\n    return provider;\n  }\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"ping\")\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount]\n      });\n      console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString())\n      await getGifList();\n  \n    } catch(error) {\n      console.log(\"Error creating BaseAccount account:\", error)\n    }\n  }\n\n  const sendGif = async () => {\n    if (inputValue.length > 0) {\n      console.log('Gif link:', inputValue);\n      setGifList([...gifList, inputValue]);\n      setInputValue('');\n    } else {\n      console.log('Empty input. Try again.');\n    }\n  };\n\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with Public Key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());}\n  };\n\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n  /*\n   * We want to render this UI when the user hasn't connected\n   * their wallet to our app yet.\n   */\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  // UseEffects\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n\n  const getGifList = async() => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n      \n      console.log(\"Got the account\", account)\n      setGifList(account.gifList)\n  \n    } catch (error) {\n      console.log(\"Error in getGifList: \", error)\n      setGifList(null);\n    }\n  }\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching GIF list...');\n      \n      // Call Solana program here.\n  \n      // Set state\n      setGifList(TEST_GIFS);\n    }\n  }, [walletAddress]);\n/*\n   * When our component first mounts, let's check to see if we have a connected\n   * Phantom Wallet\n   */\n\n  return (\n    <div className=\"App\">\n    <div className=\"container\">\n      <div className=\"header-container\">\n          <p className=\"header\">Billionaire Portal</p>\n          <p className=\"sub-text\">\n            I made this Portal âœ¨\n          </p>\n          {!walletAddress && renderNotConnectedContainer()}\n        {/* We just need to add the inverse here! */}\n        {walletAddress && renderConnectedContainer()}\n        </div>\n        <div className=\"header\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built by @PenroseXBT`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}