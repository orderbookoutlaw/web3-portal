{"ast":null,"code":"import _regeneratorRuntime from \"/Users/user/Desktop/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/user/Desktop/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/user/Desktop/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/user/Desktop/app/src/App.js\";\n\nimport React, { useEffect, useState } from 'react';\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport './App.css';\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\nimport idl from './idl.json'; // SystemProgram is a reference to the Solana runtime!\n\nvar SystemProgram = web3.SystemProgram,\n    Keypair = web3.Keypair; // Create a keypair for the account that will hold the GIF data.\n\nvar baseAccount = Keypair.generate(); // Get our program's id from the IDL file.\n\nvar programID = new PublicKey(idl.metadata.address); // Set our network to devnet.\n\nvar network = clusterApiUrl('devnet'); // Controls how we want to acknowledge when a transaction is \"done\".\n\nvar opts = {\n  preflightCommitment: \"finalized\"\n}; // All your other Twitter and GIF constants you had.\n// Constants\n\nvar TWITTER_HANDLE = 'PenroseXBT';\nvar TWITTER_LINK = \"https://twitter.com/\".concat(TWITTER_HANDLE);\n\nvar App = function App() {\n  /*\n   * This function holds the logic for deciding if a Phantom Wallet is\n   * connected or not\n   */\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      walletAddress = _useState2[0],\n      setWalletAddress = _useState2[1];\n\n  var checkIfWalletIsConnected = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _window, solana, response;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _window = window, solana = _window.solana;\n\n              if (!solana) {\n                _context.next = 12;\n                break;\n              }\n\n              if (!solana.isPhantom) {\n                _context.next = 10;\n                break;\n              }\n\n              console.log('Phantom wallet found!');\n              _context.next = 7;\n              return solana.connect({\n                onlyIfTrusted: true\n              });\n\n            case 7:\n              response = _context.sent;\n              console.log('Connected with Public Key:', response.publicKey.toString());\n              setWalletAddress(response.publicKey.toString());\n\n            case 10:\n              _context.next = 13;\n              break;\n\n            case 12:\n              alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\n\n            case 13:\n              _context.next = 18;\n              break;\n\n            case 15:\n              _context.prev = 15;\n              _context.t0 = _context[\"catch\"](0);\n              console.error(_context.t0);\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 15]]);\n    }));\n\n    return function checkIfWalletIsConnected() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  /*\n   * Let's define this method so our code doesn't break.\n   * We will write the logic for this next!\n   */\n\n\n  var connectWallet = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var _window2, solana, response, getGifList;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _window2 = window, solana = _window2.solana;\n\n              if (!solana) {\n                _context3.next = 7;\n                break;\n              }\n\n              _context3.next = 4;\n              return solana.connect();\n\n            case 4:\n              response = _context3.sent;\n              console.log('Connected with Public Key:', response.publicKey.toString());\n              setWalletAddress(response.publicKey.toString());\n\n            case 7:\n              getGifList = /*#__PURE__*/function () {\n                var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                  var provider, program, account;\n                  return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                    while (1) {\n                      switch (_context2.prev = _context2.next) {\n                        case 0:\n                          _context2.prev = 0;\n                          provider = getProvider();\n                          program = new Program(idl, programID, provider);\n                          _context2.next = 5;\n                          return program.account.baseAccount.fetch(baseAccount.publicKey);\n\n                        case 5:\n                          account = _context2.sent;\n                          console.log(\"Got the account\", account);\n                          setGifList(account.gifList);\n                          _context2.next = 14;\n                          break;\n\n                        case 10:\n                          _context2.prev = 10;\n                          _context2.t0 = _context2[\"catch\"](0);\n                          console.log(\"Error in getGifList: \", _context2.t0);\n                          setGifList(null);\n\n                        case 14:\n                        case \"end\":\n                          return _context2.stop();\n                      }\n                    }\n                  }, _callee2, null, [[0, 10]]);\n                }));\n\n                return function getGifList() {\n                  return _ref3.apply(this, arguments);\n                };\n              }();\n\n              useEffect(function () {\n                if (walletAddress) {\n                  console.log('Fetching GIF list...');\n                  getGifList();\n                }\n              }, [walletAddress]);\n\n            case 9:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function connectWallet() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var TEST_GIFS = ['https://media.giphy.com/media/aCMs4R19KMYq9JewMy/giphy.webp'];\n  /*\n   * We want to render this UI when the user hasn't connected\n   * their wallet to our app yet.\n   */\n\n  var renderNotConnectedContainer = function renderNotConnectedContainer() {\n    return /*#__PURE__*/React.createElement(\"button\", {\n      className: \"cta-button connect-wallet-button\",\n      onClick: connectWallet,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 5\n      }\n    }, \"Connect to Wallet\");\n  };\n\n  var renderConnectedContainer = function renderConnectedContainer() {\n    // If we hit this, it means the program account hasn't been initialized.\n    if (gifList === null) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"connected-container\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        className: \"cta-button submit-gif-button\",\n        onClick: createGifAccount,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 13\n        }\n      }, \"Do One-Time Initialization For GIF Program Account\"));\n    } // Otherwise, we're good! Account exists. User can submit GIFs.\n    else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"connected-container\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"form\", {\n        onSubmit: function onSubmit(event) {\n          event.preventDefault();\n          sendGif();\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter gif link!\",\n        value: inputValue,\n        onChange: onInputChange,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(\"button\", {\n        type: \"submit\",\n        className: \"cta-button submit-gif-button\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 15\n        }\n      }, \"Submit\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"gif-grid\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 13\n        }\n      }, gifList.map(function (item, index) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"gif-item\",\n          key: index,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(\"img\", {\n          src: item.gifLink,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 19\n          }\n        }));\n      })));\n    }\n  };\n  /*\n     * When our component first mounts, let's check to see if we have a connected\n     * Phantom Wallet\n     */\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: walletAddress ? 'authed-container' : 'container',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"header\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 11\n    }\n  }, \"Billionaire Portal\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"sub-text\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 11\n    }\n  }, \"I made this Portal \\u2728\"), !walletAddress && renderNotConnectedContainer(), walletAddress && renderConnectedContainer()), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"footer-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    alt: \"Twitter Logo\",\n    className: \"twitter-logo\",\n    src: twitterLogo,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"a\", {\n    className: \"footer-text\",\n    href: TWITTER_LINK,\n    target: \"_blank\",\n    rel: \"noreferrer\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 11\n    }\n  }, \"built by @PenroseXBT}\"))));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/user/Desktop/app/src/App.js"],"names":["React","useEffect","useState","Connection","PublicKey","clusterApiUrl","Program","Provider","web3","idl","SystemProgram","Keypair","baseAccount","generate","programID","metadata","address","network","opts","preflightCommitment","TWITTER_HANDLE","TWITTER_LINK","App","walletAddress","setWalletAddress","checkIfWalletIsConnected","window","solana","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","toString","alert","error","connectWallet","getGifList","provider","getProvider","program","account","fetch","setGifList","gifList","TEST_GIFS","renderNotConnectedContainer","renderConnectedContainer","createGifAccount","event","preventDefault","sendGif","inputValue","onInputChange","map","item","index","gifLink","twitterLogo"],"mappings":"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","sourcesContent":["\nimport React, { useEffect, useState } from 'react';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\nimport { Connection, PublicKey, clusterApiUrl} from '@solana/web3.js';\nimport {\n  Program, Provider, web3\n} from '@project-serum/anchor';\n\nimport idl from './idl.json';\n\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram, Keypair } = web3;\n\n// Create a keypair for the account that will hold the GIF data.\nlet baseAccount = Keypair.generate();\n\n// Get our program's id from the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n\n// Set our network to devnet.\nconst network = clusterApiUrl('devnet');\n\n// Controls how we want to acknowledge when a transaction is \"done\".\nconst opts = {\n  preflightCommitment: \"finalized\"\n}\n\n// All your other Twitter and GIF constants you had.\n\n// Constants\nconst TWITTER_HANDLE = 'PenroseXBT';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n\n  /*\n   * This function holds the logic for deciding if a Phantom Wallet is\n   * connected or not\n   */\n\n  const [walletAddress, setWalletAddress] = useState(null)\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n\n          'Connected with Public Key:',\n          response.publicKey.toString()\n        );\n\n        setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  \n  /*\n   * Let's define this method so our code doesn't break.\n   * We will write the logic for this next!\n   */\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with Public Key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n    const getGifList = async() => {\n      try {\n        const provider = getProvider();\n        const program = new Program(idl, programID, provider);\n        const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n        \n        console.log(\"Got the account\", account)\n        setGifList(account.gifList)\n    \n      } catch (error) {\n        console.log(\"Error in getGifList: \", error)\n        setGifList(null);\n      }\n    }\n    \n    useEffect(() => {\n      if (walletAddress) {\n        console.log('Fetching GIF list...');\n        getGifList()\n      }\n    }, [walletAddress]);\n    \n    \n\n  };\n\n  const TEST_GIFS = [\n    'https://media.giphy.com/media/aCMs4R19KMYq9JewMy/giphy.webp']\n  /*\n   * We want to render this UI when the user hasn't connected\n   * their wallet to our app yet.\n   */\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  const renderConnectedContainer = () => {\n    // If we hit this, it means the program account hasn't been initialized.\n      if (gifList === null) {\n        return (\n          <div className=\"connected-container\">\n            <button className=\"cta-button submit-gif-button\" onClick={createGifAccount}>\n              Do One-Time Initialization For GIF Program Account\n            </button>\n          </div>\n        )\n      } \n      // Otherwise, we're good! Account exists. User can submit GIFs.\n      else {\n        return(\n          <div className=\"connected-container\">\n            <form\n              onSubmit={(event) => {\n                event.preventDefault();\n                sendGif();\n              }}\n            >\n              <input\n                type=\"text\"\n                placeholder=\"Enter gif link!\"\n                value={inputValue}\n                onChange={onInputChange}\n              />\n              <button type=\"submit\" className=\"cta-button submit-gif-button\">\n                Submit\n              </button>\n            </form>\n            <div className=\"gif-grid\">\n              {/* We use index as the key instead, also, the src is now item.gifLink */}\n              {gifList.map((item, index) => (\n                <div className=\"gif-item\" key={index}>\n                  <img src={item.gifLink} />\n                </div>\n              ))}\n            </div>\n          </div>\n        )\n      }\n    }\n\n/*\n   * When our component first mounts, let's check to see if we have a connected\n   * Phantom Wallet\n   */\n\n  return (\n    <div className=\"App\">\n            \t{/* This was solely added for some styling fanciness */}\n\t\t\t        <div className={walletAddress ? 'authed-container' : 'container'}>\n        <div className=\"header-container\">\n          <p className=\"header\">Billionaire Portal</p>\n          <p className=\"sub-text\">\n            I made this Portal âœ¨\n          </p>\n          {/* Add the condition to show this only if we don't have a wallet address */}\n          {!walletAddress && renderNotConnectedContainer()}\n          {/* We just need to add the inverse here! */}\n          {walletAddress && renderConnectedContainer()}\n\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built by @PenroseXBT}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}